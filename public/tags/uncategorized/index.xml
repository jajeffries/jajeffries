<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uncategorized on Blog</title>
    <link>https://jajeffries.com/blog/tags/uncategorized/</link>
    <description>Recent content in Uncategorized on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Aug 2017 12:29:53 +0000</lastBuildDate><atom:link href="https://jajeffries.com/blog/tags/uncategorized/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Thoughts on sustainable product development</title>
      <link>https://jajeffries.com/blog/thoughts-on-sustainable-product-development/</link>
      <pubDate>Sun, 20 Aug 2017 12:29:53 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/thoughts-on-sustainable-product-development/</guid>
      <description>I&amp;rsquo;ve been working across several client products over the last couple of years and have noticed a couple of common problems which contribute negatively to the longevity of the projects. Knowledge Loss When projects move between teams or people working on the product move on (or even the project moving between companies, which can be common in an agency setting) some knowledge is lost of
How the code works The features of the system Why particular decisions were made What to do it something goes wrong I&amp;rsquo;ve been thinking recently about how we can minimise the impact of these issues to make projects more sustainable.</description>
    </item>
    
    <item>
      <title>Some queries for visualising IIS logs in Kibana</title>
      <link>https://jajeffries.com/blog/some-queries-for-visualising-iis-logs-in-kibana/</link>
      <pubDate>Tue, 14 Mar 2017 08:49:36 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/some-queries-for-visualising-iis-logs-in-kibana/</guid>
      <description>We pump all our IIS logs into an an ELK stack, partly as a centralised log store and partly so we can easily analyse them. A few useful queries Get all errors [code] scstatus: ([500 TO 599] OR [400 TO 403] OR [405 TO 499]) [/code] Requests that took 200ms or more [code] timetaken: [200 TO *] [/code] Requests that took 200ms or more that aren&amp;rsquo;t POST requests. [code] timetaken: [300 TO *] AND NOT method: POST [/code] While these queries are interesting on their own, using aggregations in the visualisation section can give us further insite.</description>
    </item>
    
    <item>
      <title>Naming boolean methods</title>
      <link>https://jajeffries.com/blog/naming-boolean-methods/</link>
      <pubDate>Tue, 07 Mar 2017 08:51:31 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/naming-boolean-methods/</guid>
      <description>I&amp;rsquo;ve been thinking a bit over the last few days about something I&amp;rsquo;ve seen quite a lot in a code base I&amp;rsquo;m working on: method names that exactly describe the contents of a method returning a boolean. For example, [code language=&amp;ldquo;cpp&amp;rdquo;] bool IsUkCultureAndIsNotPublished(Page page) { return page.Culture == &amp;ldquo;en-GB&amp;rdquo; &amp;amp;&amp;amp; !page.IsPublished; } [/code] Forgetting about all the othe rthings wrong with this code it introduces some duplication between the name and what the method does.</description>
    </item>
    
    <item>
      <title>Quickly checking golden master files based on stdout</title>
      <link>https://jajeffries.com/blog/quickly-checking-golden-master-files-based-on-stdout/</link>
      <pubDate>Fri, 09 Dec 2016 15:48:24 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/quickly-checking-golden-master-files-based-on-stdout/</guid>
      <description>A couple of people were interested in quick ways of checking program outputs against golden masters last night at XP Manchester. Here&amp;rsquo;s a couple of one liners I use. This assumes your program outputs to stdout and you&amp;rsquo;ve already created a file with the output. Firstly using powershell if I&amp;rsquo;m on windows without bash [code] (compare-object (get-content goldenmaster.txt) (yourcommand) | Measure-Object).Count [/code] Or alternatively using bash [code] diff goldenmaster.txt &amp;lt;(youcommand) &amp;gt;/dev/null; echo $?</description>
    </item>
    
    <item>
      <title>Technical Interviews</title>
      <link>https://jajeffries.com/blog/technical-interviews-comments/</link>
      <pubDate>Mon, 24 Oct 2016 18:40:57 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/technical-interviews-comments/</guid>
      <description>Paul D&amp;rsquo;Ambra - Oct 1, 2016
I&amp;rsquo;ve found having people code review something like this https://gist.github.com/pauldambra/f5da226d4e51bc95ef11 ahead of time was a good way to get a window into how they think. You can talk about what they choose to mention; why they choose it; and the same for things they don&amp;rsquo;t choose. Or how they&amp;rsquo;d address it, what to focus on first in coaching, or fixing it. Obviously you could tweak it so the issues are more subtle or have examples from the code they&amp;rsquo;ll actually be working with.</description>
    </item>
    
    <item>
      <title>Technical Interviews</title>
      <link>https://jajeffries.com/blog/technical-interviews/</link>
      <pubDate>Mon, 24 Oct 2016 18:40:57 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/technical-interviews/</guid>
      <description>I&amp;rsquo;ve been thinking a bit about technical interviews recently. I&amp;rsquo;ve interviewed dozens of people over the last few years, but I&amp;rsquo;m still not really satisfied with how any of them have gone. I still rarely come out of an interview thinking &amp;ldquo;I know this person has the technical skills I&amp;rsquo;m looking for&amp;rdquo;. I tend to favour working through katas or refactoring problems to see peoples design and TDD skills while talking to them about times they&amp;rsquo;ve done similar things or probing for more detail if I think there&amp;rsquo;s more there.</description>
    </item>
    
    <item>
      <title>DotNet Core on Ubuntu 16.04</title>
      <link>https://jajeffries.com/blog/dotnet-core-on-ubuntu-16-04/</link>
      <pubDate>Wed, 15 Jun 2016 18:47:07 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/dotnet-core-on-ubuntu-16-04/</guid>
      <description>I&amp;rsquo;ve been playing around with dotnet core on linux on an old laptop. I just went to install it on my new laptop running ubuntu 16.04 and found that it won&amp;rsquo;t be supported until the RTM release. In the meantime here is a work around where I basically installed the old version of libicu (which I think is something to do with unicode).``` wget http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu52_52.1-3ubuntu0.4_amd64.deb
sudo dpkg -i libicu52_52.1-3ubuntu0.4_amd64.deb
`sudo sh -c &amp;rsquo;echo &amp;ldquo;deb [arch=amd64] https://apt-mo.</description>
    </item>
    
    <item>
      <title>Strangling Old Applications</title>
      <link>https://jajeffries.com/blog/strangling-old-applications/</link>
      <pubDate>Wed, 25 May 2016 12:12:12 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/strangling-old-applications/</guid>
      <description>I&amp;rsquo;ve been a bit quiet recently, but here is a piece I wrote for our company blog. Strangling Old Applications</description>
    </item>
    
    <item>
      <title>Some links on dealing with rework in a kanban system</title>
      <link>https://jajeffries.com/blog/some-links-on-dealing-with-rework-in-a-kanban-system/</link>
      <pubDate>Wed, 14 Oct 2015 08:19:04 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/some-links-on-dealing-with-rework-in-a-kanban-system/</guid>
      <description>I&amp;rsquo;ve been thinking a bit over the last couple of days about how to deal with rework. Below are a few links that have helped guide my thought process. https://www.targetprocess.com/blog/2014/06/how-we-handle-bug-fixes-and-rework/ https://leanandkanban.wordpress.com/2009/04/08/bugs-and-rework/ http://leansoftwareengineering.com/2007/11/25/accounting-for-bugs-and-rework/</description>
    </item>
    
    <item>
      <title>Avoiding online snooping</title>
      <link>https://jajeffries.com/blog/avoiding-online-snooping/</link>
      <pubDate>Sat, 19 Sep 2015 18:44:08 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/avoiding-online-snooping/</guid>
      <description>This post is a bit different from my usual software related posts and probably has a different target audience, but here goes&amp;hellip; There has been more and more talk over the last couple of years about how much we are watched online. This can be by governments, criminals, advertising agencies or even social media companies like facebook or twitter. In this quick post I&amp;rsquo;m not going to try and convince you that you need these things (but you probably do), but I&amp;rsquo;m going to share a few easy ways you can make it harder for people to track you online.</description>
    </item>
    
    <item>
      <title>Thoughts on purescript after a couple of weeks of use</title>
      <link>https://jajeffries.com/blog/thoughts-on-purescript-after-a-couple-of-weeks-of-use/</link>
      <pubDate>Fri, 07 Aug 2015 11:35:27 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/thoughts-on-purescript-after-a-couple-of-weeks-of-use/</guid>
      <description>Most of the work I do at the moment involves dynamic languges (mostly ruby and javascript) and I often feel like I have to work slightly differently without a type system to support me, especially in javascript. A few weeks ago, I saw Becky Conning give a talk at the Manchester Lambda Lounge on purescript, which peaked my interest in finding an alternative to javascript for work in the browser. Purescript is a haskell like strongly typed language, which compiles to javascript.</description>
    </item>
    
    <item>
      <title>Fixed scope, fixed date projects and effects on slack</title>
      <link>https://jajeffries.com/blog/fixed-scope-fixed-date-projects-and-effects-on-slack-comments/</link>
      <pubDate>Fri, 31 Jul 2015 08:36:04 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/fixed-scope-fixed-date-projects-and-effects-on-slack-comments/</guid>
      <description>datoon83 - Oct 3, 2015
I&amp;rsquo;ve often thought the same, my issue is this though. I don&amp;rsquo;t really believe that many companies know what the value of the features they are delivering - having no deadline means that there is no urgency to deliver anything. While I hate delivery dates I understand that most companies aren&amp;rsquo;t mature enough to use things like Cost of Delay. What is this feature worth and how much are we loosing by not delivering it today.</description>
    </item>
    
    <item>
      <title>Fixed scope, fixed date projects and effects on slack</title>
      <link>https://jajeffries.com/blog/fixed-scope-fixed-date-projects-and-effects-on-slack/</link>
      <pubDate>Fri, 31 Jul 2015 08:36:04 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/fixed-scope-fixed-date-projects-and-effects-on-slack/</guid>
      <description>For me, slack is one of the most important of all agile development principles. It means exactly what it sounds like: having slack in your system. This can be:
More than enough time to finish the work Autonomy to work how you think will be best in a given situation The benefits of this are enormous. It gives you sustainable pace, a chance to mentor or learn from your colleagues, an increase in the quality of your work, a chance to improve your work system, refactor old difficult to work with sections of code&amp;hellip; the list goes on.</description>
    </item>
    
    <item>
      <title>Recycling tests</title>
      <link>https://jajeffries.com/blog/recycling-tests/</link>
      <pubDate>Tue, 30 Jun 2015 20:28:23 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/recycling-tests/</guid>
      <description>A couple of people have asked me about recycling tests recently, so I thought I’d put down some thoughts and an example here. Recycling tests is where you reuse old tests rather than writing new ones. Seb Rose changes the first step of the TDD cycle to
writing a failing test or make an existing test fail.
However, I don’t like the wording of this because to me it suggests that you could change the code to get a failing test.</description>
    </item>
    
    <item>
      <title>Another ruby oddity: adding an empty hash to a list</title>
      <link>https://jajeffries.com/blog/another-ruby-oddity-adding-an-empty-hash-to-a-list/</link>
      <pubDate>Fri, 05 Jun 2015 13:58:03 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/another-ruby-oddity-adding-an-empty-hash-to-a-list/</guid>
      <description>When adding a hash to a list you need to call push with brackets or you end up with an empty list. [code] 2.2.0 :001 &amp;gt; [].push {} =&amp;gt; [] 2.2.0 :002 &amp;gt; [].push({}) =&amp;gt; [{}] [/code] You can also use &amp;laquo; which doesn&amp;rsquo;t need brackets either. [code] 2.2.0 :003 &amp;gt; [] &amp;laquo; {} =&amp;gt; [{}] [/code] This isn&amp;rsquo;t the behaviour I&amp;rsquo;d expect, but I&amp;rsquo;m pretty sure there&amp;rsquo;s a logical reason for this.</description>
    </item>
    
    <item>
      <title>A safe refactoring: extracting a method</title>
      <link>https://jajeffries.com/blog/a-safe-refactoring-extracting-a-method/</link>
      <pubDate>Tue, 12 May 2015 12:08:24 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/a-safe-refactoring-extracting-a-method/</guid>
      <description>Sometimes you have some code that is duplicated in multiple places. One approach to getting rid of this would be to extract it into a method. In this article I&amp;rsquo;ll show you two different approaches you can take to do this and when I would use each one. Setting the scene I&amp;rsquo;m going to use the example of some tests for the checkout kata. Let&amp;rsquo;s say we&amp;rsquo;ve reached the following code [code] class CheckoutTests &amp;lt; Test::Unit::TestCase def test_scanning_one_a prices = {&amp;lsquo;A&amp;rsquo;:50, &amp;lsquo;B&amp;rsquo;: 70} checkout = Checkout.</description>
    </item>
    
    <item>
      <title>Interesting Things From the May 2015 ThoughtWorks Tech Radar</title>
      <link>https://jajeffries.com/blog/interesting-things-from-the-may-2015-thoughtworks-tech-radar/</link>
      <pubDate>Tue, 05 May 2015 13:00:00 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/interesting-things-from-the-may-2015-thoughtworks-tech-radar/</guid>
      <description>A list of interesting things that are either related to things I&amp;rsquo;m interested in or things I would like to look into more. In no particular order and with a couple of additions of related links.
http://martinfowler.com/articles/consumerDrivenContracts.html http://hood.ie/ http://martinfowler.com/bliki/PhoenixServer.html http://www.mbtest.org/ http://iancooper.github.io/Paramore/Brighter.html https://github.com/michael-wolfenden/Polly https://github.com/StackExchange/blackbox https://facebook.github.io/origami/ https://github.com/square/certstrap https://github.com/square/keywhiz https://github.com/bpampuch/pdfmake https://flightjs.github.io/ https://github.com/omcljs/om </description>
    </item>
    
    <item>
      <title>Changing method signatures when refactoring</title>
      <link>https://jajeffries.com/blog/changing-method-signatures-when-refactoring/</link>
      <pubDate>Fri, 24 Apr 2015 11:51:51 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/changing-method-signatures-when-refactoring/</guid>
      <description>I&amp;rsquo;ve been practicing refactoring a lot recently (I&amp;rsquo;m talking about it in a session with @kevinrutherford at Agile Manchester in a few weeks) and I&amp;rsquo;ve found a pattern that I wasn&amp;rsquo;t aware of before. When changing a method signature by changing the parameters I found I was going too long without running my tests as my code wouldn&amp;rsquo;t compile. So imagine I have a TheatrePerformance class which is responsible for keeping track of which seats are available and taken for a theatre performance.</description>
    </item>
    
    <item>
      <title>Startup/product idea thought experiment</title>
      <link>https://jajeffries.com/blog/startupproduct-idea-thought-experiment-comments/</link>
      <pubDate>Tue, 17 Feb 2015 12:47:52 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/startupproduct-idea-thought-experiment-comments/</guid>
      <description>Richard Garside - Feb 2, 2015
That reminds me of this startup idea generator: http://tinysubversions.com/startups/</description>
    </item>
    
    <item>
      <title>Startup/product idea thought experiment</title>
      <link>https://jajeffries.com/blog/startupproduct-idea-thought-experiment/</link>
      <pubDate>Tue, 17 Feb 2015 12:47:52 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/startupproduct-idea-thought-experiment/</guid>
      <description>This morning I saw this tweet from Mike Sutton (@mhsutton) https://twitter.com/mhsutton/status/567651832219312128 This got me thinking. In the past I&amp;rsquo;ve blogged about how constraints can help creativity. I wonder if you could apply existing successful startups as a constraint to a particular field. So, in Mike&amp;rsquo;s example, the field would be healthcare and the constraint would be uber. Now, Mike has suggested that it could be a plumber sidelining as a doctor, but what else could it be?</description>
    </item>
    
    <item>
      <title>Some git tips and a bonus bash tip</title>
      <link>https://jajeffries.com/blog/some-git-tips-and-a-bonus-bash-tip/</link>
      <pubDate>Tue, 10 Feb 2015 15:26:34 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/some-git-tips-and-a-bonus-bash-tip/</guid>
      <description>I&amp;rsquo;ve just come across a couple of useful git commands and thought I would share them Check which files you have ignored with you .gitignore file [code] git check-ignore **/* [/code] Or [code] git status &amp;ndash;ignored [/code] List all files in your local repo [code] git ls-tree &amp;ndash;full-tree -r HEAD [/code] You can also change HEAD to be any revision. For example, to get all the files from the previous revision: [code] git ls-tree &amp;ndash;full-tree -r HEAD@{1} [/code] Update all of your submodules.</description>
    </item>
    
    <item>
      <title>Using Marble Diagrams to Understand Reactive Streams</title>
      <link>https://jajeffries.com/blog/using-marble-diagrams-to-understand-reactive-streams/</link>
      <pubDate>Sat, 24 Jan 2015 13:29:56 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/using-marble-diagrams-to-understand-reactive-streams/</guid>
      <description>When working with complex streams of data in Rx, I often find it useful to visualise what is happening in each step of the process. A good way of doing this is using marble diagrams. Marble diagrams let you split up and visualise each step using examples, which you can easily convert into code. Let&amp;rsquo;s start with looking at an empty stream to get a hang on the basics. [code] &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; [/code] The dashes show a stream with no data on it.</description>
    </item>
    
    <item>
      <title>Simple development HTTP server with grunt connect</title>
      <link>https://jajeffries.com/blog/simple-development-http-server-with-grunt-connect/</link>
      <pubDate>Thu, 22 Jan 2015 19:49:11 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/simple-development-http-server-with-grunt-connect/</guid>
      <description>I&amp;rsquo;m working on a phonegap project at the moment. I like phonegap because it lets me develop quickly and iterate fast, because I can test in the browser. To serve the files I&amp;rsquo;ve been using a grunt task called grunt-contrib-connect. It&amp;rsquo;s simple to setup. I just run this command to install it and add it to my package.json: [code] npm install grunt-contrib-connect &amp;ndash;save-dev [/code] And then add the following config to my gruntfile.</description>
    </item>
    
    <item>
      <title>Git stash recipes</title>
      <link>https://jajeffries.com/blog/git-stash-recipes/</link>
      <pubDate>Tue, 20 Jan 2015 14:00:58 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/git-stash-recipes/</guid>
      <description>Git&amp;rsquo;s stash command is one of the most used features in my toolbox. Here are a few of my favourites. Undo everything since the last commit [code] git stash [/code] Get back what you just undid [code] git stash apply [/code] Get back what you just did and remove the stash [code] git stash pop [/code] Remove a stash without applying it [code] git stash drop [/code] View the last thing you stashed [code] git stash show -p stash@{0} [/code]</description>
    </item>
    
    <item>
      <title>Reactive programming in JavaScript</title>
      <link>https://jajeffries.com/blog/reactive-programming-in-javascript/</link>
      <pubDate>Tue, 06 Jan 2015 21:40:15 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/reactive-programming-in-javascript/</guid>
      <description>Reactive programming is something of a hot topic at the moment. While the concepts have been around for a while, it&amp;rsquo;s popularity has increased over the last few years since Microsoft released Reactive extensions for .NET (Rx.NET). It has been open sourced and now there are ports to almost every language, from Java (RxJava) to Ruby (rx.rb). Here I&amp;rsquo;m going to give a quick introduction to the JavaScript version: RxJS. So what are reactive extensions?</description>
    </item>
    
    <item>
      <title>Simple templating with underscore.js</title>
      <link>https://jajeffries.com/blog/simple-templating-with-underscore-js/</link>
      <pubDate>Fri, 02 Jan 2015 17:00:00 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/simple-templating-with-underscore-js/</guid>
      <description>I don&amp;rsquo;t like frameworks. Frameworks get everywhere, leaving you stuck with a decision you made before you built whatever you&amp;rsquo;re working on. You wouldn&amp;rsquo;t couple parts of your code as tightly as some frameworks require you to be coupled to them. It&amp;rsquo;s much better to be able to change things as you go along and as you learn more about your system. I prefer to use small libraries which I can compose together, preferably behind suitable abstractions.</description>
    </item>
    
    <item>
      <title>CQRS and Event Sourcing</title>
      <link>https://jajeffries.com/blog/cqrs-and-event-sourcing/</link>
      <pubDate>Thu, 11 Sep 2014 12:09:49 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/cqrs-and-event-sourcing/</guid>
      <description>CQRS and Event Sourcing are hot topics at the moment, but I&amp;rsquo;ve found there are relatively few easy to follow examples or explanations, especially ones which aren&amp;rsquo;t tied to particular vendors or languages. The one thing I&amp;rsquo;ve read, which has talked in detail about the concepts, rather than how to implement them was this from Greg Young, which is definitely worth a read, even if it is rather long. While I&amp;rsquo;m not the most eloquent of writers, I thought I&amp;rsquo;d have a go at explaining some concepts as I&amp;rsquo;ve experienced them and try to show you that you don&amp;rsquo;t need fancy event stores or to be writing &amp;ldquo;enterprise software&amp;rdquo; to benefit.</description>
    </item>
    
    <item>
      <title>Why I prefer Macs, but I&#39;m sticking with linux on a PC</title>
      <link>https://jajeffries.com/blog/why-i-prefer-macs-but-im-sticking-with-linux-on-a-pc/</link>
      <pubDate>Thu, 14 Aug 2014 12:49:33 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/why-i-prefer-macs-but-im-sticking-with-linux-on-a-pc/</guid>
      <description>I have always been a PC user. Since I&amp;rsquo;ve been old enough to have my own computer, it&amp;rsquo;s always been a PC running various flavours of linux. Recently I bought my first Apple product, a second hand iPad 2. I think it&amp;rsquo;s great: fantastic UI, good hardware, good battery life etc.
And at work I&amp;rsquo;ve been using a MacBook Pro. Again, this is brilliant. Great hardware, incredible screen fantastic overall user experience.</description>
    </item>
    
    <item>
      <title>Innovation feeds creativity</title>
      <link>https://jajeffries.com/blog/innovation-feeds-creativity-comments/</link>
      <pubDate>Tue, 12 Aug 2014 19:12:31 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/innovation-feeds-creativity-comments/</guid>
      <description>Jon Cain - Aug 3, 2014
Someone I know works in the music industry and he told me that when he started out recording music and songs, he&amp;rsquo;d burn the original copy to CD and post it to himself by recorded Royal Mail delivery with a cryptic message on the back of the envelope (so he knew what was inside). Once he received it, he&amp;rsquo;d keep it unopened and if he believed anyone copied it, he had the package ready and dated (and recorded by Royal Mail) to take to court so it was proven he had the idea first.</description>
    </item>
    
    <item>
      <title>Innovation feeds creativity</title>
      <link>https://jajeffries.com/blog/innovation-feeds-creativity/</link>
      <pubDate>Tue, 12 Aug 2014 19:12:31 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/innovation-feeds-creativity/</guid>
      <description>I have a friend who is a jewellery designer. She makes cool laser cut necklaces with bits of gold and silver leaf in (check out her shop on Etsy, there&amp;rsquo;s lots of cool stuff there). Recently she started to notice other people copying her designs. Understandably annoyed, she confronted them, but go little in the way of a response. So, she got back to work and changed her designs and tried something else, something new and cool that other people wouldn&amp;rsquo;t have thought of.</description>
    </item>
    
    <item>
      <title>Recursive find and replace from the command line</title>
      <link>https://jajeffries.com/blog/recursive-find-and-replace-from-the-command-line/</link>
      <pubDate>Mon, 11 Aug 2014 11:46:53 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/recursive-find-and-replace-from-the-command-line/</guid>
      <description>I always have to look up how to recursively find and replace in multiple files. Here is what I usually use:
find . -type f -print0 | xargs -0 sed -i &#39;s/old/new/g&#39; where old is what you want to find and new is what you want to replace it with. This will find all the files under the current directory, pipe it to sed, which will find and replace in the files.</description>
    </item>
    
    <item>
      <title>Pairing and Software Quality</title>
      <link>https://jajeffries.com/blog/pairing-and-software-quality/</link>
      <pubDate>Fri, 16 May 2014 18:56:49 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/pairing-and-software-quality/</guid>
      <description>I currently pair on almost everything. But not always in the traditional way. We don&amp;rsquo;t both sit at the same computer and we both work on different things. Instead we tackle different parts of the same problem at the same time. We talk through the solution at a high level first, then get started while constantly communicate, asking questions and discussing problems. If we get stuck or are working on a difficult section of code then we ask the other for help.</description>
    </item>
    
    <item>
      <title>A really simple front end javascript router</title>
      <link>https://jajeffries.com/blog/a-really-simple-front-end-javascript-router/</link>
      <pubDate>Thu, 15 May 2014 19:58:49 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/a-really-simple-front-end-javascript-router/</guid>
      <description>I dislike using large frameworks and libraries for front end work. I think I read a quote somewhere that you use librarie, but frameworks use you. I couldn&amp;rsquo;t agree more and in fact where possible I prefer to use snippets or gists, such as John Ressig&amp;rsquo;s MicroTemplates. The following funciton is intended to be used in a similar way, just copy it into your project. It listens to the popstate event and routes the change to the correct address based on an object you pass in.</description>
    </item>
    
    <item>
      <title>TDD as a tool</title>
      <link>https://jajeffries.com/blog/tdd-as-a-tool/</link>
      <pubDate>Wed, 14 May 2014 12:10:31 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/tdd-as-a-tool/</guid>
      <description>So over the last few weeks there has been a lot of talk on twitter about the benefits of TDD and the traditional red, green, refactor cycle. I have a few thoughts about each article, so I thought I&amp;rsquo;d put them together here. First Bob Marshall wrote about thinking about refactoring as waste. Specifically he talks about whether it is type 1 or 2 muda
Type I muda: Non-value-added tasks which seem to be nevertheless necessary.</description>
    </item>
    
    <item>
      <title>Finding files that have been removed in git</title>
      <link>https://jajeffries.com/blog/finding-files-that-have-been-removed-in-git/</link>
      <pubDate>Thu, 08 May 2014 15:04:37 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/finding-files-that-have-been-removed-in-git/</guid>
      <description>Another git thing I keep having to look up is how to find when a file was deleted. The following command does it easily.
git log -1 &amp;ndash; </description>
    </item>
    
    <item>
      <title>A Ruby Oddity</title>
      <link>https://jajeffries.com/blog/a-ruby-oddity/</link>
      <pubDate>Tue, 01 Apr 2014 19:34:32 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/a-ruby-oddity/</guid>
      <description>I discovered some odd behaviour in Ruby the other day. If I have the following code declaring some variables
irb(main):002:0&amp;gt; a=1, irb(main):003:0* b=1 =&amp;gt; [1, 1]
This doesn&amp;rsquo;t result in &amp;lsquo;a&amp;rsquo; having the value 1. Instead it is an array. This initially struck me as odd, until I started thinking about it as packing or unpacking tuples as you might do to return multiple values in a functional language, such as Haskell.</description>
    </item>
    
    <item>
      <title>Rolling Back a Commit in Git</title>
      <link>https://jajeffries.com/blog/rolling-back-a-commit-in-git/</link>
      <pubDate>Tue, 25 Mar 2014 13:32:15 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/rolling-back-a-commit-in-git/</guid>
      <description>I always forget how to do this and have to ask or look it up so&amp;hellip; To rollback the last commit run
git reset &amp;ndash;hard HEAD~1 get push &amp;ndash;force</description>
    </item>
    
    <item>
      <title>Sublime Text 3 Keyboard Shortcut Of The Day - Set Syntax</title>
      <link>https://jajeffries.com/blog/sublime-text-3-keyboard-shortcut-of-the-day-set-syntax/</link>
      <pubDate>Tue, 04 Mar 2014 18:42:52 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/sublime-text-3-keyboard-shortcut-of-the-day-set-syntax/</guid>
      <description>**Ctrl-Shift-P **opens the command palette, next type ss (for set syntax). Start typing the name of the syntax you want to use and a list of possibilities will drop down. Select the one you want with the arrow keys and press enter.</description>
    </item>
    
    <item>
      <title>Object Oriented Design Recommended Reading</title>
      <link>https://jajeffries.com/blog/object-oriented-design-recommended-reading-comments/</link>
      <pubDate>Tue, 04 Mar 2014 13:08:56 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/object-oriented-design-recommended-reading-comments/</guid>
      <description>Marcin Floryan - Mar 2, 2014
Thank James, this is a really good list. I have also found in the past the Design Patterns Explained book to be really useful. http://www.amazon.co.uk/Design-Patterns-Explained-Perspective-Object-Oriented/dp/0321247140
Thanks for starting an interesting twitter conversation. I&amp;rsquo;m not familiar with that one. In fact the only patterns book I&amp;rsquo;ve read is the gang of four one. I will add it to the list.</description>
    </item>
    
    <item>
      <title>Object Oriented Design Recommended Reading</title>
      <link>https://jajeffries.com/blog/object-oriented-design-recommended-reading/</link>
      <pubDate>Tue, 04 Mar 2014 13:08:56 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/object-oriented-design-recommended-reading/</guid>
      <description>Yesterday @mfloryan tweeted
So now I read #poodr and got excited again about design what is the next book I should read?
POODR is Practical Object Oriented Design in Ruby by Sandi Metz. It&amp;rsquo;s a fantastic book, which I would recommend to anyone working with an object oriented language, not just Ruby. As I went through the list of replies I found myself bookmarking the various other recommendations and thought others might benefit from it.</description>
    </item>
    
    <item>
      <title>Why wouldn&#39;t you talk to users?</title>
      <link>https://jajeffries.com/blog/why-wouldnt-you-talk-to-users/</link>
      <pubDate>Sun, 02 Mar 2014 17:08:29 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/why-wouldnt-you-talk-to-users/</guid>
      <description>I&amp;rsquo;ve hear it said that the best code is the code you don&amp;rsquo;t write. The more code you have the more code that could have mistakes and that you have to remember how it works so you can maintain it.
TDD and YAGNI goes some way towards only writing the code you need, but how do you know what your tests should be in the first place?
Involve your users</description>
    </item>
    
    <item>
      <title>Sublime Text 3 Keyboard Shortcut of the Day</title>
      <link>https://jajeffries.com/blog/sublime-text-3-keyboard-shortcut-of-the-day/</link>
      <pubDate>Mon, 17 Feb 2014 13:22:54 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/sublime-text-3-keyboard-shortcut-of-the-day/</guid>
      <description>Alt-Shift-N where N is a number will split your editor into that number of panes. You can then move between them using Alt-N. Numbers 1 to 4 gives you vertical split panes. **Alt-Shift-5 **gives you a vertical and horizontal split **Alt-Shift-8 **gives a horizontal split </description>
    </item>
    
    <item>
      <title>JavaScript Observable API&#39;s</title>
      <link>https://jajeffries.com/blog/javascript-observable-apis-comments/</link>
      <pubDate>Sun, 16 Feb 2014 13:26:20 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/javascript-observable-apis-comments/</guid>
      <description>bolshchikov - Feb 0, 2014
What&amp;rsquo;s your motivation that you decided not to use the native observable of javascript or the corresponding polyfill of Object.observe? https://github.com/new-proimage/Object.observe
I&amp;rsquo;m curious if you considered using Object.defineProperty to implement the observer pattern?
Hi bolshchikov I considered this, but decided that as it is currently only supported in Chrome (see http://kangax.github.io/es5-compat-table/es6/#Object.observe_%28part_of_b_ES7_/b_%29) as it is part of th eECMA Script 7 standard and ECMA Script 6 isn&amp;rsquo;t fully supported yet, that I would write my own.</description>
    </item>
    
    <item>
      <title>JavaScript Observable API&#39;s</title>
      <link>https://jajeffries.com/blog/javascript-observable-apis/</link>
      <pubDate>Sun, 16 Feb 2014 13:26:20 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/javascript-observable-apis/</guid>
      <description>Observable objects are core part of my tool kit. Observables let you decouple objects from other objects, models from your UI for example. I made a little library called microObservables to make normal JavaScript objects into observables. It pretty straight forward to use and you can just copy it into your project. It contains a single function observable. Just pass a reference to an object to it and it will return an observable version of your object.</description>
    </item>
    
    <item>
      <title>The Pocket Calculator Kata Continued</title>
      <link>https://jajeffries.com/blog/the-pocket-calculator-kata-continued/</link>
      <pubDate>Fri, 14 Feb 2014 12:49:06 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/the-pocket-calculator-kata-continued/</guid>
      <description>I continued my work on the pocket calculator kata at lunch today. Previously I have been struggling to remove a big if else statement and was unsure of the best approach to take. I started off by writing another test. That an operator press resets the display to &amp;ldquo;0.&amp;rdquo;. To get my test passing I simply added an elsif to my existing if statement that I was using to dispatch the button presses.</description>
    </item>
    
    <item>
      <title>The Pocket Calculator Kata</title>
      <link>https://jajeffries.com/blog/the-pocket-calculator-kata/</link>
      <pubDate>Mon, 10 Feb 2014 19:19:30 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/the-pocket-calculator-kata/</guid>
      <description>Today I had a quick go at Patchspace&amp;rsquo;s Ash Moran&amp;rsquo;s Pocket Calculator kata. I tried this once before when I was taking my first steps into BDD and found it quite challenging. In retrospect I think part of this might have been partly due to my lack of familiarisation with the tools I was using, specifically SpecFlow.
I have since started just using unit tests when doing BDD as I find it avoids the &amp;ldquo;framework&amp;rdquo; distraction and let&amp;rsquo;s you and the customer really concentrate on the problem at hand.</description>
    </item>
    
    <item>
      <title>Friday&#39;s Kata - Bowling with Uncle Bob</title>
      <link>https://jajeffries.com/blog/fridays-kata-bowling-with-uncle-bob/</link>
      <pubDate>Sun, 09 Feb 2014 12:58:06 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/fridays-kata-bowling-with-uncle-bob/</guid>
      <description>NOTE: This was written on Friday, but I didn&amp;rsquo;t get chance to post it. Today&amp;rsquo;s kata was uncle Bob&amp;rsquo;s bowling in JavaScript. I started off writing a test for rolling all gutter balls. This let me quickly and easily get a passing test. I used the self shunt pattern to record the score by passing in the score leader board. Rather than refactor at this point I decided to add a test for scoring 1 on each roll.</description>
    </item>
    
    <item>
      <title>Lunchtime Kata - Back to the Checkout</title>
      <link>https://jajeffries.com/blog/lunchtime-kata-back-to-the-checkout/</link>
      <pubDate>Sun, 09 Feb 2014 12:55:42 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/lunchtime-kata-back-to-the-checkout/</guid>
      <description>Sorry for the delay in posting this. It&amp;rsquo;s a write up of a lunchtime kata from sometime this week, which some of my colleagues participated in. Usually a couple of times a week we will work on a coding exercise at lunchtime. This could be a kata with certain constraints. For example, no getters or setters, or only one level of nesting. I planned to use this kata to introduce the self shunt pattern to my colleagues.</description>
    </item>
    
    <item>
      <title>A Month of TDD</title>
      <link>https://jajeffries.com/blog/a-month-of-tdd/</link>
      <pubDate>Fri, 07 Feb 2014 12:43:47 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/a-month-of-tdd/</guid>
      <description>NOTE: I actually wrote this yesterday, but didn&amp;rsquo;t get chance to post it. There may be an additional post today.
Background
I&amp;rsquo;m starting a new job in a few weeks where I will be using some technologies outside of my usual toolkit, namely node.js and Ruby. I&amp;rsquo;ve used them both for bits and pieces in the past, but I&amp;rsquo;ve never worked on a large code base in either.
I&amp;rsquo;m also looking to improve my TDD skills.</description>
    </item>
    
    <item>
      <title>Wildcard matching in apt-get</title>
      <link>https://jajeffries.com/blog/wildcard-matching-in-apt-get/</link>
      <pubDate>Sat, 16 Nov 2013 12:02:13 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/wildcard-matching-in-apt-get/</guid>
      <description>I&amp;rsquo;ve never really played with some of the more advanced features of debian and ubuntu&amp;rsquo;s package manager, but today I came across something useful. Ubuntu installs LibreOffice as part of a new installation, which I don&amp;rsquo;t really want as I use Google Drive for most presentations and spreadsheets. To uninstall it I typed
sudo apt-get remove libre
and pressed the tab button. There were lots of packages, but I couldn&amp;rsquo;t see a base package that looked like it would remove everything.</description>
    </item>
    
    <item>
      <title>Agile Fluency and Lean Startup</title>
      <link>https://jajeffries.com/blog/agile-fluency-and-lean-startup/</link>
      <pubDate>Sun, 03 Nov 2013 12:57:02 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/agile-fluency-and-lean-startup/</guid>
      <description>I heard Marting Fowler speaking about agile fluency. I think this is a great concept and a great way of explaining to people that being agile is more than just working in iterations. One part of the model that I had been struggling to get my head round was the metric for three star teams.
Team provides concrete business metrics.
Originally I had thought this was referring to profit and loss, or sales, which I thought would be out of the remit and understanding of most developers, especially in larger companies.</description>
    </item>
    
    <item>
      <title>Single Responsibility Principle and Encapsulating Responsibilities</title>
      <link>https://jajeffries.com/blog/single-responsibility-principle-and-encapsulating-responsibilities/</link>
      <pubDate>Sun, 08 Sep 2013 16:00:31 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/single-responsibility-principle-and-encapsulating-responsibilities/</guid>
      <description>As the name suggests, the single responsibility principle states that a class should have a single responsibility and also that it&amp;rsquo;s responsibility should be entirely encapsulated by the class.
For example, let&amp;rsquo;s say we are writing a class that sends messages. We could write something like this
public class MessageSender
{
public void SendInstantMessage(Message message) { &amp;hellip; }
public void SendEmail(Email email) { &amp;hellip; }
}
I like to think of responsibilities as reasons to change, so this class has two reasons to change: To change how we send emails To change how we send instant messages Clearly this violates the SRP.</description>
    </item>
    
    <item>
      <title>Risk Management for Developers</title>
      <link>https://jajeffries.com/blog/risk-management-for-developers/</link>
      <pubDate>Sat, 25 May 2013 14:22:30 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/risk-management-for-developers/</guid>
      <description>Most developers have worked on projects which haven&amp;rsquo;t been as successful as they could have been. Everyone has things they would do differently if they were to do it again (which is why you should be doing retrospectives). But what can you do to reduce the risk of a project failing? Firstly it&amp;rsquo;s important to understand a little bit about what risk management actually is. In Slack, Tom DeMarco defines it as &amp;ldquo;a discipline of planning for failure&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Active Patterns in F#</title>
      <link>https://jajeffries.com/blog/active-patterns-in-f/</link>
      <pubDate>Sun, 19 Aug 2012 16:37:16 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/active-patterns-in-f/</guid>
      <description>While learning F# one of the most unique things I&amp;rsquo;ve come across is active patterns. They allow you to split data into named partitions which can be used when pattern matching. For example:
&amp;gt; let (|Pass|Fail|) sucess = - if sucess then Pass else Fail - ;; val ( |Pass|Fail| ) : bool -&amp;gt; Choice&amp;lt;unit,unit&amp;gt; &amp;gt; let ExamResult res = - match res with - | Pass -&amp;gt; printfn &amp;ldquo;%s&amp;rdquo; &amp;ldquo;You Passed!</description>
    </item>
    
    <item>
      <title>An Overview of MongoDB</title>
      <link>https://jajeffries.com/blog/an-overview-of-mongodb/</link>
      <pubDate>Sat, 23 Jun 2012 14:21:49 +0000</pubDate>
      
      <guid>https://jajeffries.com/blog/an-overview-of-mongodb/</guid>
      <description>This week I attended my first conference: MongoDB UK. It was an interesting experience, both because of the technology and the people I met. MongoDB is one of the NoSQL breed of databases. This means that instead of storing data in rows in tables, which are linked by relations, all the data is stored in documents in a collection. A document is similar to a row in a table, but has a JSON like structure of key-value pairs.</description>
    </item>
    
  </channel>
</rss>
